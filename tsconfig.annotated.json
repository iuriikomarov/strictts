{
    "compilerOptions": {
        // Strict Checks
        // -------------

        // Ensures that your files are parsed in the ECMAScript strict mode, and emit “use strict” for each source file.
        // https://www.typescriptlang.org/tsconfig#alwaysStrict
        "alwaysStrict": true,

        // In some cases where no type annotations are present, TypeScript will fall back to a type of any for a variable when it cannot infer the type.
        // https://www.typescriptlang.org/tsconfig#noImplicitAny
        "noImplicitAny": true,

        // Raise error on ‘this’ expressions with an implied ‘any’ type.
        // https://www.typescriptlang.org/tsconfig#noImplicitThis
        "noImplicitThis": true,

        // The strict flag enables a wide range of type checking behavior that results in stronger guarantees of program correctness. Turning this on is equivalent to enabling all of the strict mode family options, which are outlined below. You can then turn off individual strict mode family checks as needed.
        // https://www.typescriptlang.org/tsconfig#strict
        // "strict": false,

        // When set, TypeScript will check that the built-in methods of functions call, bind, and apply are invoked with correct argument for the underlying function.
        // https://www.typescriptlang.org/tsconfig/#strictBindCallApply
        "strictBindCallApply": true,

        // When enabled, this flag causes functions parameters to be checked more correctly.
        // https://www.typescriptlang.org/tsconfig#strictFunctionTypes
        "strictFunctionTypes": true,

        // When strictNullChecks is true, null and undefined have their own distinct types and you’ll get a type error if you try to use them where a concrete value is expected.
        // https://www.typescriptlang.org/tsconfig#strictNullChecks
        "strictNullChecks": true,

        // When set to true, TypeScript will raise an error when a class property was declared but not set in the constructor.
        // https://www.typescriptlang.org/tsconfig#strictPropertyInitialization
        "strictPropertyInitialization": true,


        // Source maps
        // -----------

        // When set, instead of writing out a .js.map file to provide source maps, TypeScript will embed the source map content in the .js files. Although this results in larger JS files, it can be convenient in some scenarios. For example, you might want to debug JS files on a webserver that doesn’t allow .map files to be served.
        // https://www.typescriptlang.org/tsconfig#inlineSourceMap
        // "inlineSourceMap": false,

        // When set, TypeScript will include the original content of the .ts file as an embedded string in the source map. This is often useful in the same cases as inlineSourceMap.
        // https://www.typescriptlang.org/tsconfig#inlineSources
        // "inlineSources": false,

        // Specifies the location where debugger should locate map files instead of generated locations.
        // https://www.typescriptlang.org/tsconfig#mapRoot
        // "mapRoot": null,

        // Specify the location where a debugger should locate TypeScript files instead of relative source locations.
        // https://www.typescriptlang.org/tsconfig#sourceRoot
        // "sourceRoot": null,


        // Linter Checks
        // -------------

        // Report errors for fallthrough cases in switch statements. Ensures that any non-empty case inside a switch statement includes either break or return. This means you won’t accidentally ship a case fallthrough bug.
        // https://www.typescriptlang.org/tsconfig/#noFallthroughCasesInSwitch
        "noFallthroughCasesInSwitch": true,

        // When working with classes which use inheritance, it’s possible for a sub-class to get “out of sync” with the functions it overloads when they are renamed in the base class.
        // https://www.typescriptlang.org/tsconfig#noImplicitOverride
        "noImplicitOverride": true,

        // When enabled, TypeScript will check all code paths in a function to ensure they return a value.
        // https://www.typescriptlang.org/tsconfig#noImplicitReturns
        "noImplicitReturns": true,

        // This setting ensures consistency between accessing a field via the “dot” (obj.key) syntax, and “indexed” (obj["key"]) and the way which the property is declared in the type.
        // https://www.typescriptlang.org/tsconfig#noPropertyAccessFromIndexSignature
        "noPropertyAccessFromIndexSignature": true,

        // Turning on noUncheckedIndexedAccess will add undefined to any un-declared field in the type.
        // https://www.typescriptlang.org/tsconfig#noUncheckedIndexedAccess
        "noUncheckedIndexedAccess": true,

        // Report errors on unused locals.
        // https://www.typescriptlang.org/tsconfig#noUnusedLocals
        "noUnusedLocals": true,

        // Report errors on unused parameters in functions.
        // https://www.typescriptlang.org/tsconfig#noUnusedParameters
        "noUnusedParameters": true,


        // Experimental
        // ------------

        // Enables experimental support for emitting type metadata for decorators which works with the module reflect-metadata.
        // https://www.typescriptlang.org/tsconfig#emitDecoratorMetadata
        "emitDecoratorMetadata": true,

        // Enables experimental support for decorators, which is in stage 2 of the TC39 standardization process.
        // https://www.typescriptlang.org/tsconfig#experimentalDecorators
        "experimentalDecorators": true,


        // Advanced
        // --------

        // Set to false to disable warnings about unreachable code.
        // https://www.typescriptlang.org/tsconfig#allowUnreachableCode
        // "allowUnreachableCode": false,

        // Set to false to disable warnings about unused labels.
        // https://www.typescriptlang.org/tsconfig#allowUnusedLabels
        // "allowUnusedLabels": false,

        // When this option is enabled, TypeScript will avoid rechecking/rebuilding all truly possibly-affected files, and only recheck/rebuild files that have changed as well as files that directly import them
        // https://www.typescriptlang.org/tsconfig#assumeChangesOnlyAffectDirectDependencies
        // "assumeChangesOnlyAffectDirectDependencies": false,

        // Offers a way to configure the root directory for where declaration files are emitted.
        // https://www.typescriptlang.org/tsconfig#declarationDir
        // "declarationDir": null,

        // In multi-project TypeScript programs, TypeScript will load all of the available projects into memory in order to provide accurate results for editor responses which require a full knowledge graph like ‘Find All References’.
        // https://www.typescriptlang.org/tsconfig#disableReferencedProjectLoad
        // "disableReferencedProjectLoad": null

        // To avoid a possible memory bloat issue when working with very large JavaScript projects, there is an upper limit to the amount of memory TypeScript will allocate.
        // https://www.typescriptlang.org/tsconfig#disableSizeLimit
        // "disableSizeLimit": false,

        // When working with composite TypeScript projects, this option provides a way to declare that you do not want a project to be included when using features like find all references or jump to definition in an editor.
        // https://www.typescriptlang.org/tsconfig#disableSolutionSearching
        // "disableSolutionSearching": null,

        // When working with composite TypeScript projects, this option provides a way to go back to the pre-3.7 behavior where d.ts files were used to as the boundaries between modules. In 3.7 the source of truth is now your TypeScript files.
        // https://www.typescriptlang.org/tsconfig#disableSourceOfProjectReferenceRedirect
        // "disableSourceOfProjectReferenceRedirect": null,

        // Controls whether TypeScript will emit a byte order mark (BOM) when writing output files.
        // https://www.typescriptlang.org/tsconfig#emitBOM
        // "emitBOM": false,

        // Only emit .d.ts files; do not emit .js files.
        // https://www.typescriptlang.org/tsconfig#emitDeclarationOnly
        // "emitDeclarationOnly": false,

        // Print names of files which TypeScript sees as a part of your project and the reason they are part of the compilation.
        // https://www.typescriptlang.org/tsconfig#explainFiles
        // "explainFiles": false

        // You can use this flag to discover where TypeScript is spending it’s time when compiling. This is a tool used for understanding the performance characteristics of your codebase overall.
        // https://www.typescriptlang.org/tsconfig#extendedDiagnostics
        // "extendedDiagnostics": false,

        // TypeScript follows the case sensitivity rules of the file system it’s running on. This can be problematic if some developers are working in a case-sensitive file system and others aren’t. If a file attempts to import fileManager.ts by specifying ./FileManager.ts the file will be found in a case-insensitive file system, but not on a case-sensitive file system.
        // https://www.typescriptlang.org/tsconfig#forceConsistentCasingInFileNames
        "forceConsistentCasingInFileNames": true,

        // This option gives you the chance to have TypeScript emit a v8 CPU profile during the compiler run. The CPU profile can provide insight into why your builds may be slow.
        // https://www.typescriptlang.org/tsconfig#generateCpuProfile
        // "generateCpuProfile": null,

        // This flag controls how import works.
        // https://www.typescriptlang.org/tsconfig#importsNotUsedAsValues
        // "importsNotUsedAsValues": "remove",

        // Changes the function called in .js files when compiling JSX Elements. The most common change is to use "h" or "preact.h" instead of the default "React.createElement" if using preact.
        // https://www.typescriptlang.org/tsconfig#jsxFactory
        // "jsxFactory": "React.createElement",

        // Specify the JSX fragment factory function to use when targeting react JSX emit with jsxFactory compiler option is specified, e.g. Fragment.
        // https://www.typescriptlang.org/tsconfig#jsxFragmentFactory
        // "jsxFragmentFactory": "React.Fragment",

        // Declares the module specifier to be used for importing the jsx and jsxs factory functions when using jsx as "react-jsx" or "react-jsxdev" which were introduced in TypeScript 4.1.
        // https://www.typescriptlang.org/tsconfig#jsxImportSource
        // "jsxImportSource": "react"

        // Print names of generated files part of the compilation to the terminal.
        // https://www.typescriptlang.org/tsconfig#listEmittedFiles
        // "listEmittedFiles": false,

        // Print names of files part of the compilation. This is useful when you are not sure that TypeScript has included a file you expected.
        // https://www.typescriptlang.org/tsconfig#listFiles
        // "listFiles": false,

        // The maximum dependency depth to search under node_modules and load JavaScript files.
        // https://www.typescriptlang.org/tsconfig#maxNodeModuleJsDepth
        // "maxNodeModuleJsDepth": 0,

        // Specify the end of line sequence to be used when emitting files: ‘CRLF’ (dos) or ‘LF’ (unix).
        // https://www.typescriptlang.org/tsconfig#newLine
        // "newLine": null,

        // Instead of importing helpers with importHelpers, you can provide implementations in the global scope for the helpers you use and completely turn off emitting of helper functions.
        // https://www.typescriptlang.org/tsconfig#noEmitHelpers
        // "noEmitHelpers": false,

        // Do not emit compiler output files like JavaScript source code, source-maps or declarations if any errors were reported.
        // https://www.typescriptlang.org/tsconfig#noEmitOnError
        "noEmitOnError": true,

        // You shouldn’t need this. By default, when emitting a module file to a non-ES6 target, TypeScript emits a "use strict"; prologue at the top of the file. This setting disables the prologue.
        // https://www.typescriptlang.org/tsconfig#noImplicitUseStrict
        // "noImplicitUseStrict": false,

        // Disables the automatic inclusion of any library files. If this option is set, lib is ignored.
        // https://www.typescriptlang.org/tsconfig#noLib
        // "noLib": false,

        // By default, TypeScript will examine the initial set of files for import and <reference> directives and add these resolved files to your program. If noResolve is set, this process doesn’t happen. However, import statements are still checked to see if they resolve to a valid module, so you’ll need to make sure this is satisfied by some other means.
        // https://www.typescriptlang.org/tsconfig#noResolve
        // "noResolve": false,

        // TypeScript will unify type parameters when comparing two generic functions.
        // https://www.typescriptlang.org/tsconfig#noStrictGenericChecks
        // "noStrictGenericChecks": false,

        // Do not erase const enum declarations in generated code. const enums provide a way to reduce the overall memory footprint of your application at runtime by emitting the enum value instead of a reference.
        // https://www.typescriptlang.org/tsconfig#preserveConstEnums
        // "preserveConstEnums": false,

        // Use --jsxFactory instead. Specify the object invoked for createElement when targeting react for TSX files.
        // https://www.typescriptlang.org/tsconfig#reactNamespace
        // "reactNamespace": "React",

        // Allows importing modules with a ‘.json’ extension, which is a common practice in node projects.
        // https://www.typescriptlang.org/tsconfig#resolveJsonModule
        // "resolveJsonModule": false,

        // Use --skipLibCheck instead. Skip type checking of default library declaration files.
        // https://www.typescriptlang.org/tsconfig#skipDefaultLibCheck
        "skipDefaultLibCheck": true,

        // Skip type checking of declaration files.
        // https://www.typescriptlang.org/tsconfig#skipLibCheck
        "skipLibCheck": true,

        // Do not emit declarations for code that has an @internal annotation in it’s JSDoc comment.
        // https://www.typescriptlang.org/tsconfig#stripInternal
        // "stripInternal": false,

        // This disables reporting of excess property errors.
        // https://www.typescriptlang.org/tsconfig#suppressExcessPropertyErrors
        // "suppressExcessPropertyErrors": false,

        // Turning suppressImplicitAnyIndexErrors on suppresses reporting the error about implicit anys when indexing into objects.
        // https://www.typescriptlang.org/tsconfig#suppressImplicitAnyIndexErrors
        // "suppressImplicitAnyIndexErrors": false,

        // When you are trying to debug why a module isn’t being included. You can set traceResolutions to true to have TypeScript print information about its resolution process for each processed file.
        // https://www.typescriptlang.org/tsconfig#traceResolution
        // "traceResolution": false,

        // This flag is used as part of migrating to the upcoming standard version of class fields.
        // https://www.typescriptlang.org/tsconfig#useDefineForClassFields
        // "useDefineForClassFields": false,


        // Command Line
        // ------------

        // Whether to keep outdated console output in watch mode instead of clearing the screen every time a change happened.
        // https://www.typescriptlang.org/tsconfig#preserveWatchOutput
        // "preserveWatchOutput": false,

        // Stylize errors and messages using color and context, this is on by default — offers you a chance to have less terse, single colored messages from the compiler.
        // https://www.typescriptlang.org/tsconfig#pretty
        // "pretty": true,
    },

    "watchOptions": {
        // The strategy for how individual files are watched.
        // https://www.typescriptlang.org/tsconfig#watch-watchFile
        // "watchFile": "useFsEvents",

        // The strategy for how entire directory trees are watched under systems that lack recursive file-watching functionality.
        // https://www.typescriptlang.org/tsconfig#watch-watchDirectory
        // "watchDirectory": "useFsEvents",

        // When using file system events, this option specifies the polling strategy that gets used when the system runs out of native file watchers and/or doesn’t support native file watchers.
        // https://www.typescriptlang.org/tsconfig#watch-fallbackPolling
        // "fallbackPolling": null,

        // Synchronously call callbacks and update the state of directory watchers on platforms that don`t support recursive watching natively.
        // https://www.typescriptlang.org/tsconfig#watch-synchronousWatchDirectory
        // "synchronousWatchDirectory": null,

        // You can use excludeFiles to drastically reduce the number of files which are watched during --watch.
        // https://www.typescriptlang.org/tsconfig#watch-excludeDirectories
        // "excludeDirectories": null,

        // You can use excludeFiles to remove a set of specific files from the files which are watched.
        // https://www.typescriptlang.org/tsconfig#watch-excludeFiles
        // "excludeFiles": null,
    }
}
