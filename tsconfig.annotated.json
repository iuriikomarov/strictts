{
    "compilerOptions": {
        // Type Checking
        // =============

        // When false, raises compiler errors about unreachable code.
        // https://www.typescriptlang.org/tsconfig#allowUnreachableCode
        "allowUnreachableCode": false,

        // When false, false raises compiler errors about unused labels.
        // https://www.typescriptlang.org/tsconfig#allowUnusedLabels
        "allowUnusedLabels": false,

        // Ensures that your files are parsed in the ECMAScript strict mode, and emit “use strict” for each source file.
        // https://www.typescriptlang.org/tsconfig#alwaysStrict
        "alwaysStrict": true,

        // With exactOptionalPropertyTypes enabled, TypeScript applies stricter rules around how it handles properties on type or interfaces which have a ? prefix.
        // https://www.typescriptlang.org/tsconfig#exactOptionalPropertyTypes
        "exactOptionalPropertyTypes": true,

        // Report errors for fallthrough cases in switch statements. Ensures that any non-empty case inside a switch statement includes either break or return.
        // https://www.typescriptlang.org/tsconfig/#noFallthroughCasesInSwitch
        "noFallthroughCasesInSwitch": true,

        // In some cases where no type annotations are present, TypeScript will fall back to a type of any for a variable when it cannot infer the type.
        // https://www.typescriptlang.org/tsconfig#noImplicitAny
        "noImplicitAny": true,

        // When working with classes which use inheritance, it’s possible for a sub-class to get “out of sync” with the functions it overloads when they are renamed in the base class.
        // https://www.typescriptlang.org/tsconfig#noImplicitOverride
        "noImplicitOverride": true,

        // When enabled, TypeScript will check all code paths in a function to ensure they return a value.
        // https://www.typescriptlang.org/tsconfig#noImplicitReturns
        "noImplicitReturns": true,

        // Raise error on ‘this’ expressions with an implied ‘any’ type.
        // https://www.typescriptlang.org/tsconfig#noImplicitThis
        "noImplicitThis": true,

        // This setting ensures consistency between accessing a field via the “dot” (obj.key) syntax, and “indexed” (obj["key"]) and the way which the property is declared in the type.
        // https://www.typescriptlang.org/tsconfig#noPropertyAccessFromIndexSignature
        "noPropertyAccessFromIndexSignature": true,

        // Turning on noUncheckedIndexedAccess will add undefined to any un-declared field in the type.
        // https://www.typescriptlang.org/tsconfig#noUncheckedIndexedAccess
        "noUncheckedIndexedAccess": true,

        // Report errors on unused locals.
        // https://www.typescriptlang.org/tsconfig#noUnusedLocals
        "noUnusedLocals": true,

        // Report errors on unused parameters in functions.
        // https://www.typescriptlang.org/tsconfig#noUnusedParameters
        "noUnusedParameters": true,

        // The strict flag enables a wide range of type checking behavior that results in stronger guarantees of program correctness. Turning this on is equivalent to enabling all of the strict mode family options, which are outlined below. You can then turn off individual strict mode family checks as needed.
        // https://www.typescriptlang.org/tsconfig#strict
        // "strict": false,

        // When set, TypeScript will check that the built-in methods of functions call, bind, and apply are invoked with correct argument for the underlying function.
        // https://www.typescriptlang.org/tsconfig/#strictBindCallApply
        "strictBindCallApply": true,

        // When enabled, this flag causes functions parameters to be checked more correctly.
        // https://www.typescriptlang.org/tsconfig#strictFunctionTypes
        "strictFunctionTypes": true,

        // When strictNullChecks is true, null and undefined have their own distinct types and you’ll get a type error if you try to use them where a concrete value is expected.
        // https://www.typescriptlang.org/tsconfig#strictNullChecks
        "strictNullChecks": true,

        // When set to true, TypeScript will raise an error when a class property was declared but not set in the constructor.
        // https://www.typescriptlang.org/tsconfig#strictPropertyInitialization
        "strictPropertyInitialization": true,

        // This pattern ensures that error handling code becomes more comprehensive because you cannot guarantee that the object being thrown is a Error subclass ahead of time. With the flag useUnknownInCatchVariables enabled, then you do not need the additional syntax (: unknown) nor a linter rule to try enforce this behavior.
        "useUnknownInCatchVariables": true,


        // Interop Constraints
        // -------------------
        
        // When set to true, allowSyntheticDefaultImports allows you to write an babel-like default import.
        // https://www.staging-typescript.org/tsconfig#allowSyntheticDefaultImports
        "allowSyntheticDefaultImports": false,

        // Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports.
        // https://www.staging-typescript.org/tsconfig#esModuleInterop
        "esModuleInterop": true,

        // TypeScript follows the case sensitivity rules of the file system it’s running on. This can be problematic if some developers are working in a case-sensitive file system and others aren’t. If a file attempts to import fileManager.ts by specifying ./FileManager.ts the file will be found in a case-insensitive file system, but not on a case-sensitive file system.
        // https://www.typescriptlang.org/tsconfig#forceConsistentCasingInFileNames
        "forceConsistentCasingInFileNames": true,

        // If true, ts-loader operates on a single file at a time, which means they it can’t apply code transforms that depend on understanding the full type system.
        // https://www.staging-typescript.org/tsconfig#isolatedModules
        // "isolatedModules": false,

        // This is to reflect the same flag in Node.js; which does not resolve the real path of symlinks.
        // https://www.staging-typescript.org/tsconfig#preserveSymlinks
        "preserveSymlinks": false,


        // Language and Environment
        // ------------------------

        // Enables experimental support for emitting type metadata for decorators which works with the module reflect-metadata.
        // https://www.typescriptlang.org/tsconfig#emitDecoratorMetadata
        "emitDecoratorMetadata": true,

        // Enables experimental support for decorators, which is in stage 2 of the TC39 standardization process.
        // https://www.typescriptlang.org/tsconfig#experimentalDecorators
        "experimentalDecorators": true,

        // Controls how JSX constructs are emitted in JavaScript files.
        // https://www.staging-typescript.org/tsconfig#jsx
        "jsx": "react",

        // Changes the function called in .js files when compiling JSX Elements. The most common change is to use "h" or "preact.h" instead of the default "React.createElement" if using preact.
        // https://www.typescriptlang.org/tsconfig#jsxFactory
        // "jsxFactory": "React.createElement",

        // Specify the JSX fragment factory function to use when targeting react JSX emit with jsxFactory compiler option is specified, e.g. Fragment.
        // https://www.typescriptlang.org/tsconfig#jsxFragmentFactory
        // "jsxFragmentFactory": "React.Fragment",

        // Declares the module specifier to be used for importing the jsx and jsxs factory functions when using jsx as "react-jsx" or "react-jsxdev" which were introduced in TypeScript 4.1.
        // https://www.typescriptlang.org/tsconfig#jsxImportSource
        // "jsxImportSource": "react"

        // Control which of standart TS lib files explicitly included to compilation.
        // https://www.staging-typescript.org/tsconfig#lib
        "lib": [
            "es2019"
        ],

        // Disables the automatic inclusion of any library files. If this option is set, lib is ignored.
        // https://www.typescriptlang.org/tsconfig#noLib
        // "noLib": false,

        // Use --jsxFactory instead. Specify the object invoked for createElement when targeting react for TSX files.
        // https://www.typescriptlang.org/tsconfig#reactNamespace
        // "reactNamespace": "React",

        // Modern browsers support all ES6 features, so ES6 is a good choice. You might choose to set a lower target if your code is deployed to older environments, or a higher target if your code is guaranteed to run in newer environments.
        // https://www.staging-typescript.org/tsconfig#target
        "target": "ES2019",

        // This flag is used as part of migrating to the upcoming standard version of class fields.
        // https://www.typescriptlang.org/tsconfig#useDefineForClassFields
        // "useDefineForClassFields": false,


        // Output Formatting
        // -----------------

        // Do not truncate error messages.
        // https://www.typescriptlang.org/tsconfig#noErrorTruncation
        // "noErrorTruncation": false,

        // Whether to keep outdated console output in watch mode instead of clearing the screen every time a change happened.
        // https://www.typescriptlang.org/tsconfig#preserveWatchOutput
        // "preserveWatchOutput": false,

        // Stylize errors and messages using color and context, this is on by default — offers you a chance to have less terse, single colored messages from the compiler.
        // https://www.typescriptlang.org/tsconfig#pretty
        "pretty": true,


        // Completeness
        // ------------

        // Use --skipLibCheck instead. Skip type checking of default library declaration files.
        // https://www.typescriptlang.org/tsconfig#skipDefaultLibCheck
        "skipDefaultLibCheck": true,

        // Skip type checking of declaration files.
        // https://www.typescriptlang.org/tsconfig#skipLibCheck
        "skipLibCheck": true,


        // Watch Options
        // -------------

        // When this option is enabled, TypeScript will avoid rechecking/rebuilding all truly possibly-affected files, and only recheck/rebuild files that have changed as well as files that directly import them
        // https://www.typescriptlang.org/tsconfig#assumeChangesOnlyAffectDirectDependencies
        // "assumeChangesOnlyAffectDirectDependencies": false,
    }
}
